rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isAuthenticated();
      
      // CRITICAL: Users can ONLY create their own document with the correct firebaseUid
      // The document ID MUST match their Firebase Auth UID
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.firebaseUid == request.auth.uid &&
                      request.resource.data.isAdmin == false && // MUST be false - admins set manually
                      request.resource.data.isBanned == false; // MUST be false on creation
      
      // Users can only update their own document (but CANNOT change admin status, ban status, userId, or firebaseUid)
      // Admins can update ban status and ban reason for any user
      allow update: if (isAuthenticated() &&
                       request.auth.uid == userId && 
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'isBanned', 'banReason', 'userId', 'firebaseUid'])) ||
                      (isAdmin() &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'userId', 'firebaseUid']));
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Items collection
    match /items/{itemId} {
      // Anyone can read items
      allow read: if true;
      
      // Only admins can create or delete items
      allow create: if isAdmin();
      allow delete: if isAdmin();
      
      // Admins can update all fields
      // Authenticated users can only update stock-related fields (during rolls)
      allow update: if isAdmin() || 
                      (isAuthenticated() && 
                       !request.resource.data.diff(resource.data).affectedKeys()
                         .hasAny(['name', 'imageUrl', 'value', 'rarity', 'offSale', 'stockType', 'totalStock']));
      
      // Ownership markers subcollection (for tracking unique owners)
      match /owners/{userId} {
        // Anyone authenticated can read ownership markers
        allow read: if isAuthenticated();
        
        // Only allow creating ownership markers during item rolls
        allow create: if isAuthenticated() && request.auth.uid == userId;
        
        // Admins can delete ownership markers (for economy reset)
        allow delete: if isAdmin();
        
        // No updates allowed
        allow update: if false;
      }
    }
    
    // Inventory collection
    match /inventory/{inventoryId} {
      // Users can read their own inventory using their Firebase Auth UID
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      // Users can add to their own inventory (from rolling)
      // CRITICAL: userId MUST match their Firebase Auth UID
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.rolledAt is int;
      
      // Admins can read and delete any inventory
      allow read, delete: if isAdmin();
      
      // No updates allowed (inventory items are immutable)
      allow update: if false;
    }
    
    // Global rolls collection (recent high-value rolls)
    match /globalRolls/{rollId} {
      // Anyone can read global rolls
      allow read: if true;
      
      // Authenticated users can create global rolls (when they roll high-value items)
      allow create: if isAuthenticated() &&
                      request.resource.data.timestamp is int &&
                      request.resource.data.itemValue >= 2500000;
      
      // Admins can delete old rolls
      allow delete: if isAdmin();
      
      // No updates allowed
      allow update: if false;
    }
    
    // Audit logs collection (admin actions tracking)
    match /auditLogs/{logId} {
      // Only admins can read audit logs
      allow read: if isAdmin();
      
      // Only admins can create audit logs
      allow create: if isAdmin() &&
                      request.resource.data.timestamp is int &&
                      request.resource.data.adminId is string &&
                      request.resource.data.actionType is string;
      
      // No updates or deletes allowed
      allow update: if false;
      allow delete: if false;
    }
    
    // Counters collection (for sequential user IDs)
    match /counters/{counterId} {
      // Anyone authenticated can read counters
      allow read: if isAuthenticated();
      
      // Only allow incrementing the userId counter during user creation
      allow write: if isAuthenticated() && 
                     counterId == 'userId';
    }
  }
}
